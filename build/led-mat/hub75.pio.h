// -------------------------------------------------- //
// This file is autogenerated by pioasm; do not edit! //
// -------------------------------------------------- //

#pragma once

#if !PICO_NO_HARDWARE
#include "hardware/pio.h"
#endif

// ---------- //
// hub75_data //
// ---------- //

#define hub75_data_wrap_target 0
#define hub75_data_wrap 1

static const uint16_t hub75_data_program_instructions[] = {
            //     .wrap_target
    0x6008, //  0: out    pins, 8         side 0     
    0xb042, //  1: nop                    side 1     
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program hub75_data_program = {
    .instructions = hub75_data_program_instructions,
    .length = 2,
    .origin = -1,
};

static inline pio_sm_config hub75_data_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + hub75_data_wrap_target, offset + hub75_data_wrap);
    sm_config_set_sideset(&c, 1, false, false);
    return c;
}

// Helper function (for use in C program) to initialize this PIO program
void hub75_data_program_init(PIO pio, uint sm, uint offset, float div) {
    // Sets up state machine and wrap target. This function is automatically
    // generated in hub75.pio.h.
    pio_sm_config c = hub75_data_program_get_default_config(offset);
    // Allow PIO to control GPIO pin (as output)
    pio_gpio_init(pio, HUB75_R0);
    pio_gpio_init(pio, HUB75_G0);
    pio_gpio_init(pio, HUB75_B0);
    pio_gpio_init(pio, HUB75_R1);
    pio_gpio_init(pio, HUB75_G1);
    pio_gpio_init(pio, HUB75_B1);
    pio_gpio_init(pio, HUB75_CLK);
    // Connect pin to OUT pin (control with 'out' instruction)
    sm_config_set_out_pins(&c, HUB75_COLOR_BASE, 8);
    // side connectiton to clock
    sm_config_set_sideset_pins(&c, HUB75_CLK);
    // Set the pin direction to output (in PIO)
    pio_sm_set_consecutive_pindirs(pio, sm, HUB75_COLOR_BASE, 8, true);
    pio_sm_set_consecutive_pindirs(pio, sm, HUB75_CLK, 1, true);
    // join input to the output fifo
    sm_config_set_fifo_join(&c, PIO_FIFO_JOIN_TX);
    // setup autopull
    sm_config_set_out_shift(&c, true, true, 32);
    // Set the clock divider for the state machine
    sm_config_set_clkdiv(&c, div);
    // Load configuration and jump to start of the program
    pio_sm_init(pio, sm, offset, &c);
}
static inline void hub75_wait_tx_stall(PIO pio, uint sm) {
    uint32_t txstall_mask = 1u << (PIO_FDEBUG_TXSTALL_LSB + sm);
    pio->fdebug = txstall_mask;
    while (!(pio->fdebug & txstall_mask))
        tight_loop_contents();
}

#endif

// ---------- //
// hub75_ctrl //
// ---------- //

#define hub75_ctrl_wrap_target 0
#define hub75_ctrl_wrap 6

static const uint16_t hub75_ctrl_program_instructions[] = {
            //     .wrap_target
    0x7000, //  0: out    pins, 32        side 2     
    0x7030, //  1: out    x, 16           side 2     
    0x7850, //  2: out    y, 16           side 3     
    0x5060, //  3: in     null, 32        side 2     
    0x1026, //  4: jmp    !x, 6           side 2     
    0x0045, //  5: jmp    x--, 5          side 0     
    0x1086, //  6: jmp    y--, 6          side 2     
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program hub75_ctrl_program = {
    .instructions = hub75_ctrl_program_instructions,
    .length = 7,
    .origin = -1,
};

static inline pio_sm_config hub75_ctrl_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + hub75_ctrl_wrap_target, offset + hub75_ctrl_wrap);
    sm_config_set_sideset(&c, 2, false, false);
    return c;
}

// Helper function (for use in C program) to initialize this PIO program
void hub75_ctrl_program_init(PIO pio, uint sm, uint offset, float div) {
    // Sets up state machine and wrap target. This function is automatically
    // generated in hub75.pio.h.
    pio_sm_config c = hub75_ctrl_program_get_default_config(offset);
    // Allow PIO to control GPIO pin (as output)
    pio_gpio_init(pio, HUB75_LATCH);
    pio_gpio_init(pio, HUB75_BLANK);
    // Set the pin direction to output (in PIO)
    pio_sm_set_consecutive_pindirs(pio, sm, HUB75_LATCH, 2, true);
    // side connections for latch and blank
    sm_config_set_sideset_pins(&c, HUB75_LATCH);
    // Allow PIO to control GPIO pin (as output)
    pio_gpio_init(pio, HUB75_A0);
    pio_gpio_init(pio, HUB75_A1);
    pio_gpio_init(pio, HUB75_A2);
    pio_gpio_init(pio, HUB75_A3);
    pio_gpio_init(pio, HUB75_A4);
    // Connect pin to OUT pin (control with 'out' instruction)
    sm_config_set_out_pins(&c, HUB75_ADDR_BASE, HUB75_ADDR_PIN_RANGE);
    // Set the pin direction to output (in PIO)
    pio_sm_set_consecutive_pindirs(pio, sm, HUB75_ADDR_BASE, HUB75_ADDR_PIN_RANGE, true);
    // setup autopull
    sm_config_set_out_shift(&c, true, true, 32);
    // setup autopush
    sm_config_set_in_shift(&c, true, true, 32);
    // Set the clock divider for the state machine
    sm_config_set_clkdiv(&c, div);
    // Load configuration and jump to start of the program
    pio_sm_init(pio, sm, offset, &c);
}

#endif

